import React from 'react';
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom';
import SubscriptionPlans from './components/SubscriptionPlans';
import { Login } from './components/Login';
import { ExamProvider } from './context/ExamContext';
import { AuthProvider, useAuth } from './context/AuthContext';
import { ThemeProvider } from './context/ThemeContext';
import { ChatbotProvider } from './context/ChatbotContext';
import Layout from './components/Layout';
import PaymentPage from './pages/PaymentPage';
import DashboardPage from './pages/DashboardPage';
import ExamPage from './pages/ExamPage';
import ResultsPage from './pages/ResultsPage';
import TestPage from './pages/TestPage';

// Componente para proteger rutas que requieren autenticaciÃ³n
const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated } = useAuth();
  return isAuthenticated ? <>{children}</> : <Navigate to="/login" />;
};

// Componente para proteger rutas que requieren suscripciÃ³n
const SubscriptionRoute: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isAuthenticated, hasPremium } = useAuth();
  
  if (!isAuthenticated) {
    return <Navigate to="/login" />;
  }
  
  if (!hasPremium) {
    return <Navigate to="/planes" />;
  }
  
  return <>{children}</>;
};

const AppRoutes: React.FC = () => {
  const { isAuthenticated } = useAuth();

  return (
    <Routes>      {/* Ruta inicial - Planes de suscripciÃ³n */}
      <Route
        path="/"
        element={<SubscriptionPlans />}
      />
      
      {/* Ruta planes de suscripciÃ³n (alternativa) */}
      <Route
        path="/planes"
        element={<SubscriptionPlans />}
      />

      {/* PÃ¡gina de pago */}
      <Route
        path="/payment"
        element={
          <Layout>
            <PaymentPage />
          </Layout>
        }
      />

      {/* Login */}
      <Route
        path="/login"
        element={
          isAuthenticated ? (
            <Navigate to="/simulador" replace />
          ) : (
            <Layout>
              <Login />
            </Layout>
          )
        }
      />

      {/* Rutas protegidas - Requieren autenticaciÃ³n */}
      <Route
        path="/simulador"
        element={
          <ProtectedRoute>
            <Layout>
              <DashboardPage />
            </Layout>
          </ProtectedRoute>
        }
      />

      <Route
        path="/simulador/exam/:id"
        element={
          <ProtectedRoute>
            <Layout>
              <ExamPage />
            </Layout>
          </ProtectedRoute>
        }
      />

      <Route
        path="/simulador/results"
        element={
          <ProtectedRoute>
            <Layout>
              <ResultsPage />
            </Layout>
          </ProtectedRoute>
        }
      />
    </Routes>
  );
};

const App: React.FC = () => {
  return (
    <BrowserRouter>
      <ThemeProvider>
        <AuthProvider>
          <ExamProvider>
            <ChatbotProvider>
              <AppRoutes />
            </ChatbotProvider>
          </ExamProvider>
        </AuthProvider>
      </ThemeProvider>
    </BrowserRouter>
  );
};

export default App;